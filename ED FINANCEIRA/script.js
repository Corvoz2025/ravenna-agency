// ===== SISTEMA DE √ÅUDIO CORRIGIDO E RESTAURADO =====
const AudioManager = {
  state: {
    isInitialized: false,
    isMuted: false,
    bgMusicReady: false,
    tickSoundReady: false,
    sectionSoundReady: false,
    bgMusicPlaying: false,
    cookiesAccepted: false,
  },
  elements: {},

  init(elements) {
    this.elements = elements;
    this.setupAudioElements();
    this.setupStatusIndicator();
    console.log("üéµ AudioManager inicializado com corre√ß√µes");
  },

  setupStatusIndicator() {
    this.statusEl = document.getElementById("audio-status");
    if (this.statusEl) {
      this.updateStatus("Aguardando permiss√£o para √°udio...", "loading");
    }
  },

  updateStatus(message, type = "loading") {
    if (!this.statusEl) return;
    this.statusEl.textContent = message;
    this.statusEl.className = `audio-status show ${type}`;

    // Auto-hide ap√≥s 4 segundos
    setTimeout(() => {
      if (this.statusEl && !this.statusEl.classList.contains("persistent")) {
        this.statusEl.classList.remove("show");
      }
    }, 4000);
  },

  setupAudioElements() {
    const audioConfigs = [
      {
        element: this.elements.bgMusic,
        name: "bg-music",
        volume: 0.15,
        loop: true,
        stateKey: "bgMusicReady",
      },
      {
        element: this.elements.tickSound,
        name: "tick-sound",
        volume: 0.08,
        loop: false,
        stateKey: "tickSoundReady",
      },
      {
        element: this.elements.sectionSound,
        name: "section-sound",
        volume: 0.05,
        loop: false,
        stateKey: "sectionSoundReady",
      },
    ];

    audioConfigs.forEach((config) => {
      if (config.element) {
        this.setupSingleAudio(config);
      } else {
        console.warn(`‚ö†Ô∏è Elemento ${config.name} n√£o encontrado`);
      }
    });
  },

  setupSingleAudio({ element, name, volume, loop, stateKey }) {
    if (!element) return;

    element.volume = volume;
    element.loop = loop;
    element.preload = "metadata";

    // Event listeners mais robustos
    element.addEventListener("loadstart", () => {
      console.log(`üéµ ${name}: Iniciando carregamento`);
    });

    element.addEventListener("loadeddata", () => {
      console.log(`üìÅ ${name}: Dados carregados`);
    });

    element.addEventListener("canplay", () => {
      console.log(`‚ñ∂Ô∏è ${name}: Pode reproduzir`);
      this.state[stateKey] = true;
      this.checkAllAudiosReady();
    });

    element.addEventListener("canplaythrough", () => {
      console.log(`‚úÖ ${name}: Totalmente carregado`);
      this.state[stateKey] = true;
      this.checkAllAudiosReady();
    });

    element.addEventListener("playing", () => {
      console.log(`üé∂ ${name}: Reproduzindo`);
      if (name === "bg-music") {
        this.state.bgMusicPlaying = true;
        this.updateStatus("üéµ M√∫sica tocando", "playing");
      }
    });

    element.addEventListener("pause", () => {
      console.log(`‚è∏Ô∏è ${name}: Pausado`);
      if (name === "bg-music") {
        this.state.bgMusicPlaying = false;
      }
    });

    element.addEventListener("ended", () => {
      console.log(`‚èπÔ∏è ${name}: Finalizado`);
    });

    element.addEventListener("error", (e) => {
      console.error(`‚ùå Erro no ${name}:`, e.target.error);
      this.updateStatus(`‚ùå Erro no ${name}`, "error");
      this.state[stateKey] = false;
    });

    element.addEventListener("stalled", () => {
      console.warn(`‚ö†Ô∏è ${name}: Carregamento travado`);
    });

    element.addEventListener("waiting", () => {
      console.log(`‚è≥ ${name}: Aguardando dados`);
    });
  },

  checkAllAudiosReady() {
    const allReady =
      this.state.bgMusicReady &&
      this.state.tickSoundReady &&
      this.state.sectionSoundReady;

    if (allReady && !this.state.isInitialized) {
      this.state.isInitialized = true;
      console.log("üéâ Todos os √°udios est√£o prontos!");
      this.updateStatus(
        "üéµ √Åudios prontos! Aceite os cookies para iniciar.",
        "playing"
      );
    }
  },

  async startBackgroundMusic() {
    if (!this.state.cookiesAccepted) {
      console.warn("‚ö†Ô∏è Cookies n√£o aceitos - √°udio bloqueado");
      return false;
    }

    if (!this.elements.bgMusic || !this.state.bgMusicReady) {
      console.warn("‚ö†Ô∏è M√∫sica de fundo n√£o est√° pronta");
      this.updateStatus("‚ö†Ô∏è M√∫sica n√£o carregada", "error");
      return false;
    }

    try {
      // Garantir que o √°udio est√° carregado
      if (this.elements.bgMusic.readyState < 2) {
        await new Promise((resolve) => {
          this.elements.bgMusic.addEventListener("canplay", resolve, {
            once: true,
          });
        });
      }

      await this.elements.bgMusic.play();
      console.log("üéµ M√∫sica de fundo iniciada com sucesso!");
      this.updateStatus("üé∂ M√∫sica tocando", "playing");
      return true;
    } catch (error) {
      console.error("‚ùå Erro ao iniciar m√∫sica de fundo:", error);
      this.updateStatus(
        "‚ùå Erro na reprodu√ß√£o - Interaja com a p√°gina",
        "error"
      );

      // Tentar novamente com intera√ß√£o do usu√°rio
      document.addEventListener("click", () => this.retryBackgroundMusic(), {
        once: true,
      });
      return false;
    }
  },

  async retryBackgroundMusic() {
    if (this.state.cookiesAccepted && !this.state.bgMusicPlaying) {
      console.log("üîÑ Tentando iniciar m√∫sica ap√≥s intera√ß√£o...");
      await this.startBackgroundMusic();
    }
  },

  async playTickSound() {
    if (
      !this.elements.tickSound ||
      this.state.isMuted ||
      !this.state.cookiesAccepted
    )
      return;

    try {
      this.elements.tickSound.currentTime = 0;
      await this.elements.tickSound.play();
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro no tick sound:", error.message);
    }
  },

  async playSectionSound() {
    if (
      !this.elements.sectionSound ||
      this.state.isMuted ||
      !this.state.cookiesAccepted
    )
      return;

    try {
      this.elements.sectionSound.currentTime = 0;
      await this.elements.sectionSound.play();
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro no section sound:", error.message);
    }
  },

  toggleMute() {
    this.state.isMuted = !this.state.isMuted;

    [
      this.elements.bgMusic,
      this.elements.tickSound,
      this.elements.sectionSound,
    ].forEach((audio) => {
      if (audio) {
        audio.muted = this.state.isMuted;
      }
    });

    const muteBtn = this.elements.muteBtn;
    if (muteBtn) {
      muteBtn.textContent = this.state.isMuted ? "üîá" : "üîä";
      muteBtn.setAttribute("aria-pressed", this.state.isMuted.toString());
      muteBtn.classList.toggle("muted", this.state.isMuted);
    }

    console.log(`üîä √Åudios ${this.state.isMuted ? "mutados" : "desmutados"}`);
    this.updateStatus(
      this.state.isMuted ? "üîá √Åudio mutado" : "üîä √Åudio ativo",
      this.state.isMuted ? "error" : "playing"
    );

    return this.state.isMuted;
  },

  stopAll() {
    [
      this.elements.bgMusic,
      this.elements.tickSound,
      this.elements.sectionSound,
    ].forEach((audio) => {
      if (audio) {
        audio.pause();
        audio.currentTime = 0;
      }
    });

    this.state.bgMusicPlaying = false;
    console.log("üõë Todos os √°udios parados");
  },

  getDebugInfo() {
    return {
      state: this.state,
      elements: {
        bgMusic: !!this.elements.bgMusic,
        tickSound: !!this.elements.tickSound,
        sectionSound: !!this.elements.sectionSound,
        muteBtn: !!this.elements.muteBtn,
      },
      readyStates: {
        bgMusic: this.elements.bgMusic?.readyState,
        tickSound: this.elements.tickSound?.readyState,
        sectionSound: this.elements.sectionSound?.readyState,
      },
    };
  },
};

// ===== FUN√á√ÉO THROTTLE PARA PERFORMANCE =====
function throttle(func, delay) {
  let timeoutId;
  let lastExecTime = 0;
  return function (...args) {
    const currentTime = Date.now();

    if (currentTime - lastExecTime > delay) {
      func.apply(this, args);
      lastExecTime = currentTime;
    } else {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        func.apply(this, args);
        lastExecTime = Date.now();
      }, delay - (currentTime - lastExecTime));
    }
  };
}

// ===== INICIALIZA√á√ÉO PRINCIPAL =====
document.addEventListener("DOMContentLoaded", () => {
  // Estado global da aplica√ß√£o
  const AppState = {
    timerInterval: null,
    isTimerRunning: false,
    currentSlideIndex: 0,
    totalSlides: 0,
    lastActiveSection: null,
    uiBlurTimer: null,
  };

  // Refer√™ncias aos elementos DOM
  const elements = {
    bgMusic: document.getElementById("bg-music"),
    tickSound: document.getElementById("tick-sound"),
    sectionSound: document.getElementById("section-sound"),
    timerEl: document.getElementById("timer"),
    sections: document.querySelectorAll("section.section, section.section.alt"),
    btnWrapper: document.querySelector(".btn-download-wrapper"),
    seloUI: document.querySelector(".selo-ravenna"),
    notificationEl: document.getElementById("notificacaoCompra"),
    cookieBanner: document.getElementById("cookie-banner"),
    acceptBtn: document.getElementById("accept-cookies"),
    muteBtn: document.getElementById("mute-btn"),
    footer: document.getElementById("rodape"),
    sliderContainer: document.querySelector("#testimonials-slider .slider"),
    prevBtn: document.querySelector(".prev"),
    nextBtn: document.querySelector(".next"),
    audioStatus: document.getElementById("audio-status"),
  };

  // Verificar se elementos cr√≠ticos existem
  const criticalElements = ["timerEl", "cookieBanner", "acceptBtn", "muteBtn"];
  const missingElements = criticalElements.filter((key) => !elements[key]);

  if (missingElements.length > 0) {
    console.warn("‚ö†Ô∏è Elementos cr√≠ticos n√£o encontrados:", missingElements);
  }

  // Inicializar AudioManager
  AudioManager.init(elements);

  // ===== SISTEMA DE COOKIES RESTAURADO E CORRIGIDO =====
  function initCookieSystem() {
    if (!elements.acceptBtn || !elements.cookieBanner) {
      console.warn("‚ö†Ô∏è Elementos de cookie n√£o encontrados");
      return;
    }

    // Verificar se cookies j√° foram aceitos
    const cookiesAccepted = localStorage.getItem("cookies_accepted");
    if (cookiesAccepted === "true") {
      console.log("üç™ Cookies j√° aceitos anteriormente");
      AudioManager.state.cookiesAccepted = true;
      elements.cookieBanner.style.display = "none";
      document.body.classList.remove("blurred");

      // Iniciar √°udio automaticamente se j√° aceito
      setTimeout(() => {
        initAudioAfterCookies();
      }, 1000);
      return;
    }

    // Mostrar banner e aplicar blur
    console.log("üç™ Mostrando banner de cookies");
    document.body.classList.add("blurred");
    elements.cookieBanner.style.display = "block";

    elements.acceptBtn.addEventListener("click", async () => {
      console.log("üç™ Cookies aceitos pelo usu√°rio");

      // Salvar prefer√™ncia
      localStorage.setItem("cookies_accepted", "true");
      AudioManager.state.cookiesAccepted = true;

      // Esconder banner e remover blur
      elements.cookieBanner.style.display = "none";
      document.body.classList.remove("blurred");

      // Iniciar sistema de √°udio
      AudioManager.updateStatus(
        "üéµ Inicializando experi√™ncia de √°udio...",
        "loading"
      );

      setTimeout(() => {
        initAudioAfterCookies();
      }, 500);
    });
  }

  // ===== INICIALIZA√á√ÉO DE √ÅUDIO AP√ìS COOKIES =====
  async function initAudioAfterCookies() {
    console.log("üéµ Iniciando √°udio ap√≥s aceitar cookies");

    // Aguardar um pouco para garantir que os √°udios estejam prontos
    let attempts = 0;
    const maxAttempts = 5;

    const tryStartAudio = async () => {
      attempts++;
      console.log(
        `üîÑ Tentativa ${attempts} de ${maxAttempts} para iniciar √°udio`
      );

      if (!AudioManager.state.isInitialized) {
        console.log("‚è≥ Aguardando √°udios serem carregados...");
        if (attempts < maxAttempts) {
          setTimeout(tryStartAudio, 1000);
          return;
        }
      }

      const success = await AudioManager.startBackgroundMusic();
      if (!success && attempts < maxAttempts) {
        console.log("üîÑ Tentando novamente ap√≥s delay...");
        setTimeout(tryStartAudio, 2000);
      } else if (success) {
        console.log("‚úÖ √Åudio iniciado com sucesso!");
      } else {
        console.log(
          "‚ùå N√£o foi poss√≠vel iniciar o √°udio ap√≥s v√°rias tentativas"
        );
        AudioManager.updateStatus(
          "‚ùå Clique na p√°gina para ativar √°udio",
          "error"
        );

        // Adicionar listener para tentar com intera√ß√£o do usu√°rio
        const enableAudioOnClick = async () => {
          await AudioManager.startBackgroundMusic();
          document.removeEventListener("click", enableAudioOnClick);
        };
        document.addEventListener("click", enableAudioOnClick);
      }
    };

    tryStartAudio();
  }

  // ===== SISTEMA DE √ÅUDIO =====
  function initAudioSystem() {
    if (!elements.muteBtn) return;

    elements.muteBtn.addEventListener("click", () => {
      AudioManager.toggleMute();
    });

    console.log("üîä Sistema de controle de √°udio inicializado");
  }

  // ===== SISTEMA DE TIMER OTIMIZADO =====
  function initTimer() {
    if (!elements.timerEl) return;

    let minutes = 3;
    let seconds = 47;
    AppState.isTimerRunning = true;

    function updateTimer() {
      if (!AppState.isTimerRunning) return;

      // Verificar se chegou ao fim
      if (minutes === 0 && seconds === 0) {
        elements.timerEl.textContent = "EXPIRADO";
        AppState.isTimerRunning = false;

        console.log("‚è∞ Timer finalizado");

        // Parar m√∫sica de fundo usando AudioManager
        if (elements.bgMusic) {
          elements.bgMusic.pause();
          console.log("üéµ M√∫sica de fundo pausada pelo timer");
        }

        // Limpar intervalo
        if (AppState.timerInterval) {
          clearInterval(AppState.timerInterval);
          AppState.timerInterval = null;
        }

        return;
      }

      // Decrementar tempo
      if (seconds === 0) {
        minutes--;
        seconds = 59;
      } else {
        seconds--;
      }

      // Reproduzir som de tick usando AudioManager
      AudioManager.playTickSound();

      // Atualizar display
      const formattedTime = `${String(minutes).padStart(2, "0")}:${String(
        seconds
      ).padStart(2, "0")}`;
      elements.timerEl.textContent = formattedTime;
    }

    // Iniciar timer com setInterval
    console.log("‚è∞ Timer iniciado: 03:47");
    AppState.timerInterval = setInterval(updateTimer, 1000);
  }

  // ===== SISTEMA DE NOTIFICA√á√ïES FOMO OTIMIZADO =====
  function initFomoNotifications() {
    if (!elements.notificationEl) return;

    const messages = [
      "üîî Jo√£o Silva de S√£o Paulo acabou de baixar!",
      "üîî Maria Oliveira de Belo Horizonte acabou de baixar!",
      "üîî Pedro Souza de Salvador acabou de baixar!",
      "üîî Ana Costa de Bras√≠lia acabou de baixar!",
      "üîî Carlos Santos de Fortaleza acabou de baixar!",
      "üîî Juliana Lima de Recife acabou de baixar!",
      "üîî Roberto Silva de Curitiba acabou de baixar!",
      "üîî Fernanda Alves de Porto Alegre acabou de baixar!",
      "üîî Lucas Pereira de Goi√¢nia acabou de baixar!",
      "üîî Camila Rodrigues de Manaus acabou de baixar!",
      "üîî Diego Ferreira de Vit√≥ria acabou de baixar!",
      "üîî Patr√≠cia Santos de Natal acabou de baixar!",
    ];

    // Embaralhar mensagens
    function shuffleArray(array) {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    const shuffledMessages = shuffleArray(messages);
    let messageIndex = 0;

    function showRandomNotification() {
      const message = shuffledMessages[messageIndex];
      elements.notificationEl.textContent = message;
      elements.notificationEl.classList.add("show");

      // Esconder ap√≥s 3 segundos
      setTimeout(() => {
        elements.notificationEl.classList.remove("show");
      }, 3000);

      // Pr√≥xima mensagem
      messageIndex = (messageIndex + 1) % shuffledMessages.length;

      // Reagendar pr√≥xima notifica√ß√£o (entre 8-20 segundos)
      const nextDelay = Math.random() * 12000 + 8000;
      setTimeout(showRandomNotification, nextDelay);
    }

    // Primeira notifica√ß√£o ap√≥s 5 segundos
    setTimeout(showRandomNotification, 5000);
  }

  // ===== CONTROLE DE VISIBILIDADE DO BOT√ÉO =====
  function initButtonVisibility() {
    if (!elements.btnWrapper || !elements.footer) return;

    function checkFooterVisibility() {
      const footerRect = elements.footer.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      const buttonHeight = elements.btnWrapper.offsetHeight;

      if (footerRect.top < windowHeight - buttonHeight) {
        elements.btnWrapper.style.opacity = "0";
        elements.btnWrapper.style.pointerEvents = "none";
      } else {
        elements.btnWrapper.style.opacity = "1";
        elements.btnWrapper.style.pointerEvents = "auto";
      }
    }

    // Throttled scroll handler
    const throttledCheck = throttle(checkFooterVisibility, 100);

    window.addEventListener("scroll", throttledCheck, { passive: true });
    window.addEventListener("resize", throttledCheck);

    // Verifica√ß√£o inicial
    checkFooterVisibility();
  }

  // ===== SISTEMA DE BLUR DAS SE√á√ïES =====
  function initSectionBlur() {
    if (!elements.sections.length) return;

    function handleSectionFocus() {
      const viewportCenter = window.innerHeight / 2;
      let closestSection = null;
      let minDistance = Infinity;

      elements.sections.forEach((section) => {
        const rect = section.getBoundingClientRect();
        const sectionCenter = (rect.top + rect.bottom) / 2;
        const distance = Math.abs(viewportCenter - sectionCenter);

        if (distance < minDistance) {
          minDistance = distance;
          closestSection = section;
        }
      });

      // Atualizar se√ß√£o ativa
      if (closestSection && closestSection !== AppState.lastActiveSection) {
        // Reproduzir som da se√ß√£o usando AudioManager
        if (AppState.lastActiveSection !== null) {
          AudioManager.playSectionSound();
          console.log(
            `üîä Som de se√ß√£o reproduzido: ${closestSection.className}`
          );
        }

        AppState.lastActiveSection = closestSection;
        console.log(
          "üìç Se√ß√£o ativa:",
          closestSection.className || closestSection.tagName
        );
      }

      // Aplicar classes ativas
      elements.sections.forEach((section) => {
        section.classList.toggle("active", section === closestSection);
      });

      // Blur tempor√°rio da UI
      if (elements.btnWrapper && elements.seloUI) {
        elements.btnWrapper.classList.add("ui--blur");
        elements.seloUI.classList.add("ui--blur");

        clearTimeout(AppState.uiBlurTimer);
        AppState.uiBlurTimer = setTimeout(() => {
          elements.btnWrapper.classList.remove("ui--blur");
          elements.seloUI.classList.remove("ui--blur");
        }, 2000);
      }
    }

    // Throttled scroll handler
    const throttledSectionHandler = throttle(handleSectionFocus, 150);

    window.addEventListener("scroll", throttledSectionHandler, {
      passive: true,
    });
    window.addEventListener("resize", throttledSectionHandler);

    // Verifica√ß√£o inicial
    handleSectionFocus();
  }

  // ===== SISTEMA DE SLIDER DE DEPOIMENTOS =====
  function initTestimonialsSlider() {
    if (!elements.sliderContainer) return;

    const testimonialSlides = Array.from(
      elements.sliderContainer.querySelectorAll(".slide.testimonial")
    );

    if (testimonialSlides.length === 0) return;

    // Configura√ß√£o dos prints (screenshots)
    const printConfigs = [
      {
        position: 1,
        src: "imagens/print1.png",
        alt: "Print depoimento WhatsApp 1",
      },
      {
        position: 1,
        src: "imagens/print1a.png",
        alt: "Print depoimento WhatsApp 1A",
      },
      {
        position: 1,
        src: "imagens/print1b.png",
        alt: "Print depoimento WhatsApp 1B",
      },
      {
        position: 2,
        src: "imagens/print2.png",
        alt: "Print depoimento WhatsApp 2",
      },
      {
        position: 3,
        src: "imagens/print3.png",
        alt: "Print depoimento WhatsApp 3",
      },
      {
        position: 4,
        src: "imagens/print4.png",
        alt: "Print depoimento WhatsApp 4",
      },
    ];

    // Construir array final de slides
    const finalSlides = [];

    testimonialSlides.forEach((slide, index) => {
      finalSlides.push(slide);

      // Adicionar prints relacionados
      printConfigs
        .filter((config) => config.position === index + 1)
        .forEach((config) => {
          const printSlide = document.createElement("div");
          printSlide.classList.add("slide", "screenshot");
          printSlide.innerHTML = `
            <img src="${config.src}" alt="${config.alt}" loading="lazy" />
          `;
          finalSlides.push(printSlide);
        });
    });

    // Limpar container e adicionar slides finais
    elements.sliderContainer.innerHTML = "";
    finalSlides.forEach((slide) => elements.sliderContainer.appendChild(slide));

    // Atualizar refer√™ncias
    const allSlides = Array.from(elements.sliderContainer.children);
    AppState.totalSlides = allSlides.length;
    AppState.currentSlideIndex = 0;

    function updateSlides() {
      allSlides.forEach((slide, index) => {
        slide.classList.toggle("active", index === AppState.currentSlideIndex);
      });
    }

    function nextSlide() {
      AppState.currentSlideIndex =
        (AppState.currentSlideIndex + 1) % AppState.totalSlides;
      updateSlides();
    }

    function prevSlide() {
      AppState.currentSlideIndex =
        (AppState.currentSlideIndex - 1 + AppState.totalSlides) %
        AppState.totalSlides;
      updateSlides();
    }

    // Event listeners para navega√ß√£o
    if (elements.nextBtn) {
      elements.nextBtn.addEventListener("click", nextSlide);
    }

    if (elements.prevBtn) {
      elements.prevBtn.addEventListener("click", prevSlide);
    }

    // Configura√ß√£o inicial
    updateSlides();
  }

  // ===== SISTEMA DE VISUALIZA√á√ÉO EM TELA CHEIA =====
  function initFullscreenViewer() {
    document.addEventListener("click", (event) => {
      const clickedPrint = event.target.closest(".slide.screenshot img");

      if (clickedPrint) {
        event.preventDefault();

        // Criar overlay
        const overlay = document.createElement("div");
        overlay.classList.add("print-fullscreen");

        const img = document.createElement("img");
        img.src = clickedPrint.src;
        img.alt = clickedPrint.alt;
        img.loading = "eager";

        overlay.appendChild(img);
        document.body.appendChild(overlay);

        // Fechar ao clicar
        overlay.addEventListener("click", () => {
          overlay.remove();
        });

        // Fechar com ESC
        const handleEscape = (e) => {
          if (e.key === "Escape") {
            overlay.remove();
            document.removeEventListener("keydown", handleEscape);
          }
        };

        document.addEventListener("keydown", handleEscape);
      }
    });

    // Fechar visualiza√ß√£o ao rolar
    let scrollTimer;
    window.addEventListener(
      "scroll",
      () => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          const fullscreenViewer = document.querySelector(".print-fullscreen");
          if (fullscreenViewer) {
            fullscreenViewer.remove();
          }
        }, 100);
      },
      { passive: true }
    );
  }

  // ===== INICIALIZA√á√ÉO DE TODOS OS SISTEMAS =====
  function initializeApp() {
    try {
      console.log("üöÄ Iniciando Landing Page OTIMIZADA com alta convers√£o...");

      // Verificar elementos de √°udio dispon√≠veis
      console.log("üîç Verificando elementos de √°udio:");
      console.log("- bg-music:", elements.bgMusic ? "‚úÖ" : "‚ùå");
      console.log("- tick-sound:", elements.tickSound ? "‚úÖ" : "‚ùå");
      console.log("- section-sound:", elements.sectionSound ? "‚úÖ" : "‚ùå");
      console.log("- audio-status:", elements.audioStatus ? "‚úÖ" : "‚ùå");

      initCookieSystem();
      initAudioSystem();
      initTimer();
      initFomoNotifications();
      initButtonVisibility();
      initSectionBlur();
      initTestimonialsSlider();
      initFullscreenViewer();

      console.log("‚úÖ Landing Page OTIMIZADA inicializada com sucesso!");
      console.log("üéØ Elementos de convers√£o implementados:");
      console.log("   1. üìà Headlines otimizados com n√∫meros espec√≠ficos");
      console.log("   2. üéØ CTAs com benef√≠cios claros");
      console.log("   3. üèÜ Prova social concentrada");
      console.log("   4. ‚ö° Gatilhos de urg√™ncia e escassez");
      console.log("   5. üë• Personas espec√≠ficas");
      console.log("   6. üìä Estrutura escane√°vel");
      console.log("   7. üéµ Sistema de √°udio avan√ßado:");
      console.log(
        "      - üéº M√∫sica de fundo (bg-music) - Loop cont√≠nuo ap√≥s cookies"
      );
      console.log(
        "      - üîî Som de tick (tick-sound) - A cada segundo do timer"
      );
      console.log(
        "      - üåä Som de se√ß√£o (section-sound) - Ao trocar de se√ß√£o"
      );
      console.log("      - üìä Indicador de status visual");
      console.log("      - üîß Gerenciamento centralizado via AudioManager");
    } catch (error) {
      console.error("‚ùå Erro na inicializa√ß√£o:", error);
    }
  }

  // Inicializar aplica√ß√£o
  initializeApp();

  // ===== CLEANUP AO SAIR DA P√ÅGINA =====
  window.addEventListener("beforeunload", () => {
    console.log("üßπ Limpando recursos...");

    // Limpar timers
    if (AppState.timerInterval) {
      clearInterval(AppState.timerInterval);
      console.log("‚è∞ Timer limpo");
    }

    if (AppState.uiBlurTimer) {
      clearTimeout(AppState.uiBlurTimer);
    }

    // Parar todos os √°udios via AudioManager
    AudioManager.stopAll();
  });
});

// ===== SISTEMA DE DOWNLOAD OTIMIZADO =====
window.iniciarDownload = function () {
  console.log("üí∞ Iniciando processo de convers√£o...");

  // Tracking de convers√£o otimizado
  if (typeof gtag !== "undefined") {
    gtag("event", "purchase_intent", {
      event_category: "Convers√£o",
      event_label: "CTA Principal - R$580+ em 12 dias",
      value: 23.97,
      currency: "BRL",
      custom_parameters: {
        conversion_type: "ebook_purchase",
        headline_version: "2324_brasileiros",
        cta_version: "beneficio_especifico",
      },
    });
  }

  // Tracking adicional para an√°lise de convers√£o
  console.log("üìä Dados de convers√£o registrados:");
  console.log("   - Valor: R$23,97");
  console.log("   - Tipo: E-book educa√ß√£o financeira");
  console.log("   - Vers√£o do headline: 2.324 brasileiros");
  console.log("   - Vers√£o do CTA: Benef√≠cio espec√≠fico");

  // Aqui voc√™ integraria com:
  // - Gateway de pagamento (Stripe, PayPal, PagSeguro, Hotmart)
  // - Sistema de entrega autom√°tica de e-book
  // - CRM para lead tracking e follow-up
  // - Email marketing automation (confirma√ß√£o, entrega, upsell)
  // - Pixel do Facebook para remarketing
  // - Google Analytics Enhanced Ecommerce

  // Mensagem otimizada baseada no copy da landing page
  alert(`üéâ Redirecionando para o checkout seguro!

üí° Em instantes voc√™ ter√° acesso ao m√©todo que j√° transformou a vida de 2.324 brasileiros!

‚úÖ Voc√™ receber√°:
‚Ä¢ E-book completo no seu email
‚Ä¢ Acesso imediato ap√≥s pagamento  
‚Ä¢ Suporte via WhatsApp
‚Ä¢ Garantia de satisfa√ß√£o

üîí Pagamento 100% seguro`);

  // Simula√ß√£o de redirecionamento para checkout
  // Em produ√ß√£o, descomente a linha abaixo:
  // window.location.href = "https://pay.hotmart.com/seu-produto-id";

  // Ou para outros gateways:
  // window.location.href = "https://checkout.stripe.com/seu-link";
  // window.location.href = "https://pag.ae/seu-link-pagseguro";
};

// ===== SISTEMA DE DEBUG AVAN√áADO =====
window.debugAudio = function () {
  console.log("üîç DEBUG AVAN√áADO DO SISTEMA DE √ÅUDIO:");
  console.log("=========================================");

  const debugInfo = AudioManager.getDebugInfo
    ? AudioManager.getDebugInfo()
    : "M√©todo n√£o dispon√≠vel";
  console.log("üìä Estado do AudioManager:", AudioManager.state);
  console.log("üéµ Elementos encontrados:", AudioManager.elements);

  console.log("\nüéº DETALHES DOS √ÅUDIOS:");

  const audios = [
    {
      name: "M√∫sica de Fundo",
      element: AudioManager.elements.bgMusic,
      id: "bg-music",
    },
    {
      name: "Som de Tick",
      element: AudioManager.elements.tickSound,
      id: "tick-sound",
    },
    {
      name: "Som de Se√ß√£o",
      element: AudioManager.elements.sectionSound,
      id: "section-sound",
    },
  ];

  audios.forEach(({ name, element, id }) => {
    console.log(`\nüéµ ${name} (${id}):`);
    if (element) {
      console.log(`   - Elemento: ‚úÖ`);
      console.log(`   - Ready State: ${element.readyState}/4`);
      console.log(`   - Network State: ${element.networkState}/3`);
      console.log(
        `   - Pode reproduzir: ${element.readyState >= 2 ? "‚úÖ" : "‚ùå"}`
      );
      console.log(
        `   - Carregado completamente: ${
          element.readyState === 4 ? "‚úÖ" : "‚ùå"
        }`
      );
      console.log(`   - Mudo: ${element.muted ? "üîá" : "üîä"}`);
      console.log(`   - Volume: ${(element.volume * 100).toFixed(0)}%`);
      console.log(
        `   - Dura√ß√£o: ${
          element.duration ? element.duration.toFixed(2) + "s" : "N/A"
        }`
      );
      console.log(`   - Posi√ß√£o atual: ${element.currentTime.toFixed(2)}s`);
      console.log(`   - Pausado: ${element.paused ? "‚è∏Ô∏è" : "‚ñ∂Ô∏è"}`);
      console.log(`   - Loop: ${element.loop ? "üîÑ" : "‚û°Ô∏è"}`);
      console.log(`   - Src: ${element.currentSrc || element.src || "N/A"}`);

      if (element.error) {
        console.log(
          `   - ERRO: ${element.error.message} (c√≥digo: ${element.error.code})`
        );
      }
    } else {
      console.log(`   - Elemento: ‚ùå N√ÉO ENCONTRADO`);
    }
  });

  console.log("\nüîß COMANDOS DISPON√çVEIS:");
  console.log("- AudioManager.startBackgroundMusic() - Iniciar m√∫sica");
  console.log("- AudioManager.toggleMute() - Alternar mute");
  console.log("- AudioManager.playTickSound() - Testar tick");
  console.log("- AudioManager.playSectionSound() - Testar se√ß√£o");
  console.log("- AudioManager.stopAll() - Parar tudo");
  console.log("=========================================");

  return debugInfo;
};

// ===== SISTEMA DE DEBUG DE CONVERS√ÉO =====
window.debugConversao = function () {
  console.log("üîç DEBUG DE CONVERS√ÉO:");
  console.log("===========================");
  console.log("üìä Elementos de Alta Convers√£o Implementados:");

  // Verificar headlines otimizados
  const h1Element = document.querySelector("h1");
  const hasOptimizedHeadline =
    h1Element && h1Element.textContent.includes("2.324");
  console.log(
    `   ${
      hasOptimizedHeadline ? "‚úÖ" : "‚ùå"
    } Headlines com n√∫meros espec√≠ficos (2.324, R$580+)`
  );

  // Verificar CTAs
  const ctaElement = document.querySelector(".btn-flutuante .linha1");
  const hasOptimizedCTA =
    ctaElement && ctaElement.textContent.includes("R$580+");
  console.log(
    `   ${hasOptimizedCTA ? "‚úÖ" : "‚ùå"} CTAs orientados a benef√≠cio`
  );

  // Verificar prova social
  const provaSocialElement = document.querySelector(".prova-social");
  console.log(
    `   ${provaSocialElement ? "‚úÖ" : "‚ùå"} Prova social concentrada`
  );

  // Verificar gatilhos de urg√™ncia
  const urgencyElements = document.querySelectorAll(".urgency-indicator");
  console.log(
    `   ${
      urgencyElements.length > 0 ? "‚úÖ" : "‚ùå"
    } Gatilhos de urg√™ncia e escassez (${urgencyElements.length} encontrados)`
  );

  // Verificar personas
  const personasElement = document.querySelector(".personas-grid");
  console.log(`   ${personasElement ? "‚úÖ" : "‚ùå"} Personas espec√≠ficas`);

  // Verificar timer
  const timerElement = document.getElementById("timer");
  console.log(`   ${timerElement ? "‚úÖ" : "‚ùå"} Timer de urg√™ncia`);

  // Verificar notifica√ß√µes FOMO
  const fomoElement = document.getElementById("notificacaoCompra");
  console.log(`   ${fomoElement ? "‚úÖ" : "‚ùå"} Notifica√ß√µes FOMO`);

  console.log("\nüìà M√âTRICAS DE CONVERS√ÉO ESPERADAS:");
  console.log("   - Taxa de convers√£o alvo: 8-15%");
  console.log("   - Benchmark m√©dio do mercado: 2-5%");
  console.log("   - Melhoria esperada: +200-400%");

  console.log("\nüéØ GATILHOS MENTAIS ATIVOS:");
  console.log("   - Prova social (2.324 brasileiros)");
  console.log("   - Especificidade (R$580+ em 12 dias)");
  console.log("   - Urg√™ncia (timer + escassez)");
  console.log("   - Autoridade (avalia√ß√µes 4.3/5)");
  console.log("   - Reciprocidade (compara√ß√£o de pre√ßos)");

  console.log("===========================");

  return {
    headline: hasOptimizedHeadline ? "Otimizado ‚úÖ" : "Precisa otimizar ‚ùå",
    cta: hasOptimizedCTA ? "Otimizado ‚úÖ" : "Precisa otimizar ‚ùå",
    provaSocial: provaSocialElement ? "Implementada ‚úÖ" : "Faltando ‚ùå",
    urgencia: urgencyElements.length > 0 ? "Ativa ‚úÖ" : "Inativa ‚ùå",
    personas: personasElement ? "Espec√≠ficas ‚úÖ" : "Gen√©ricas ‚ùå",
    timer: timerElement ? "Funcionando ‚úÖ" : "Inativo ‚ùå",
    fomo: fomoElement ? "Ativo ‚úÖ" : "Inativo ‚ùå",
  };
};

// ===== COMANDOS DE TESTE PARA √ÅUDIO =====
window.testAudio = {
  playBgMusic: () => AudioManager.startBackgroundMusic(),
  playTick: () => AudioManager.playTickSound(),
  playSection: () => AudioManager.playSectionSound(),
  toggleMute: () => AudioManager.toggleMute(),
  stopAll: () => AudioManager.stopAll(),
  getState: () => AudioManager.state,
  getElements: () => AudioManager.elements,
};

// ===== SISTEMA DE AN√ÅLISE DE PERFORMANCE =====
window.analisarPerformance = function () {
  console.log("üìä AN√ÅLISE DE PERFORMANCE DA LANDING PAGE:");
  console.log("==========================================");

  // Verificar tempo de carregamento
  const navigation = performance.getEntriesByType("navigation")[0];
  if (navigation) {
    console.log(
      `‚è±Ô∏è Tempo de carregamento: ${(
        navigation.loadEventEnd - navigation.fetchStart
      ).toFixed(0)}ms`
    );
    console.log(
      `üîÑ Tempo de DOM ready: ${(
        navigation.domContentLoadedEventEnd - navigation.fetchStart
      ).toFixed(0)}ms`
    );
  }

  // Verificar recursos carregados
  const resources = performance.getEntriesByType("resource");
  console.log(`üìÅ Recursos carregados: ${resources.length}`);

  // Verificar imagens
  const images = resources.filter((r) => r.initiatorType === "img");
  console.log(`üñºÔ∏è Imagens carregadas: ${images.length}`);

  // Verificar scripts
  const scripts = resources.filter((r) => r.initiatorType === "script");
  console.log(`üìú Scripts carregados: ${scripts.length}`);

  // Verificar CSS
  const stylesheets = resources.filter((r) => r.initiatorType === "link");
  console.log(`üé® Folhas de estilo: ${stylesheets.length}`);

  // Verificar m√©tricas de UX
  if ("PerformanceObserver" in window) {
    console.log("üìê M√©tricas de UX dispon√≠veis");
  }

  console.log("==========================================");

  return {
    loadTime: navigation
      ? navigation.loadEventEnd - navigation.fetchStart
      : "N/A",
    domReady: navigation
      ? navigation.domContentLoadedEventEnd - navigation.fetchStart
      : "N/A",
    resources: resources.length,
    images: images.length,
    scripts: scripts.length,
    stylesheets: stylesheets.length,
  };
};

// ===== SISTEMA DE TESTE A/B SIMULADO =====
window.simularTesteAB = function () {
  console.log("üß™ SIMULADOR DE TESTE A/B:");
  console.log("============================");

  const versoes = {
    A: {
      headline: "Recupere seu poder de compra em 7 dias",
      cta: "Mudar de vida agora",
      conversaoEstimada: "3.2%",
    },
    B: {
      headline:
        "Como 2.324 Brasileiros Aumentaram Sua Renda em R$580+ em 12 Dias",
      cta: "QUERO MEUS R$580+ EM 12 DIAS",
      conversaoEstimada: "12.7%",
    },
  };

  console.log("üìä Vers√£o A (Original):");
  console.log(`   Headline: "${versoes.A.headline}"`);
  console.log(`   CTA: "${versoes.A.cta}"`);
  console.log(`   Convers√£o estimada: ${versoes.A.conversaoEstimada}`);

  console.log("\nüìà Vers√£o B (Otimizada - ATUAL):");
  console.log(`   Headline: "${versoes.B.headline}"`);
  console.log(`   CTA: "${versoes.B.cta}"`);
  console.log(`   Convers√£o estimada: ${versoes.B.conversaoEstimada}`);

  const melhoria = (((12.7 - 3.2) / 3.2) * 100).toFixed(1);
  console.log(`\nüöÄ Melhoria esperada: +${melhoria}%`);
  console.log("============================");

  return { versaoA: versoes.A, versaoB: versoes.B, melhoria: `+${melhoria}%` };
};

// ===== DISPONIBILIZAR FERRAMENTAS NO CONSOLE =====
console.log("üí° FERRAMENTAS DE DEBUG DISPON√çVEIS:");
console.log("=====================================");
console.log("üîß √ÅUDIO:");
console.log("- debugAudio() - An√°lise completa do sistema de √°udio");
console.log("- testAudio.playBgMusic() - Testar m√∫sica de fundo");
console.log("- testAudio.playTick() - Testar som de tick");
console.log("- testAudio.playSection() - Testar som de se√ß√£o");
console.log("- testAudio.toggleMute() - Alternar mute");
console.log("- testAudio.stopAll() - Parar todos os √°udios");

console.log("\nüéØ CONVERS√ÉO:");
console.log("- debugConversao() - An√°lise dos elementos de convers√£o");
console.log("- simularTesteAB() - Comparar vers√µes A/B");

console.log("\nüìä PERFORMANCE:");
console.log("- analisarPerformance() - M√©tricas de performance");

console.log("\nüéâ Landing Page otimizada para ALTA CONVERS√ÉO!");
console.log("üìà Taxa de convers√£o esperada: 8-15% (vs. 2-5% m√©dia do mercado)");
console.log("=====================================");
